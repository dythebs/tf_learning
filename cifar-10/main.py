x = tf.placeholder(dtype=tf.float32,shape=[None,3072])
x_image = tf.reshape(x,[-1,32,32,3])
h_conv1 = conv_layer_3x3(x_image,3,64)
h_conv2 = conv_layer_3x3(h_conv1,64,64)
h_pool1 = max_pool_2x2(h_conv2)
h_conv3 = conv_layer_3x3(h_pool1,64,128)
h_conv4 = conv_layer_3x3(h_conv3,128,128)
h_pool2 = max_pool_2x2(h_conv4)
h_conv5 = conv_layer_3x3(h_pool2,128,256)
h_conv6 = conv_layer_3x3(h_conv5,256,256)
h_conv7 = conv_layer_3x3(h_conv6,256,256)
h_pool3 = max_pool_2x2(h_conv7)
h_conv8 = conv_layer_3x3(h_pool3,256,512)
h_conv9 = conv_layer_3x3(h_conv8,512,512)
h_conv10 = conv_layer_3x3(h_conv9,512,512)
h_pool4 = max_pool_2x2(h_conv10)
h_conv11 = conv_layer_3x3(h_pool4,512,512)
h_conv12 = conv_layer_3x3(h_conv11,512,512)
h_conv13 = conv_layer_3x3(h_conv12,512,512)
h_pool5 = max_pool_2x2(h_conv13)
h_pool5_flat = tf.reshape(h_pool5,[-1,512])
h_fc1 = fc_layer(h_pool5_flat,512,4096)
h_fc2 = fc_layer(h_fc1,4096,4096)
h_fc3 = fc_layer(h_fc2,4096,1000)
keep_prob = tf.placeholder(tf.float32)
h_fc3_drop = tf.nn.dropout(h_fc3,keep_prob)
W_fc4 = weight_varialbe([1000,10])
b_fc4 = bias_variable([10])
y = tf.nn.softmax(tf.matmul(h_fc3_drop,W_fc4) + b_fc4,name='predictions')
y_ = tf.placeholder(dtype=tf.float32,shape=[None,10],name='labels')

global_step = tf.Variable(0,trainable=False)
learning_rate = tf.train.exponential_decay(1e-2,global_step,decay_steps=13600,decay_rate=0.1,staircase=True) 
cross_entropy = -tf.reduce_mean(y_*tf.log(tf.clip_by_value(y,1e-8,1)))
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy,global_step=global_step)

correct_prediction = tf.equal(tf.argmax(y,1),tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))

init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)

for i in range(100000):
	batch_xs, batch_ys = cifar10.train.next_batch(128)
	sess.run(train_step, feed_dict={x:batch_xs,y_:batch_ys,keep_prob:0.5})
	if i % 100 == 0:
		test_batch_xs, test_batch_ys = cifar10.test.next_batch(100)
		test_accuracy, loss = sess.run([accuracy, cross_entropy] ,feed_dict={x:test_batch_xs,y_:test_batch_ys,keep_prob:1.0})
		print("step %d, test accuracy %g, loss %g" % (i, test_accuracy, loss))
